<?xml version="1.0" encoding="utf-8"?>

<rfc
  xmlns:xi="http://www.w3.org/2001/XInclude"
  submissionType="IETF"
  category="std"
  ipr="trust200902">
  <front>
    <title>OAuth 2.0 Direct Authentication</title>
    <seriesInfo name="Internet-Draft" value="draft-hanson-oauth-direct-00"/>
    <author fullname="Jared Hanson" initials="J." surname="Hanson">
      <organization>Okta</organization>
      <address>
        <postal>
          <street>100 First Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94105</code>
          <country>US</country>
        </postal>
        <email>jared.hanson@okta.com</email>
        <uri>https://www.jaredhanson.me/</uri>
      </address>
    </author>
    <date/>
    <area>Security</area>
    <workgroup>Web Authorization Protocol</workgroup>
    
    <abstract>
      <t>This specification defines extensions to OAuth 2.0 that improve its
        suitabilty for use in situations where clients require direct access to
        resource owner credentials.</t>
    </abstract>
   </front>
  
  <middle>
    <section>
      <name>Introduction</name>
      
      <t><xref target="RFC6749">OAuth 2.0</xref> is an authorization framework
        that enables an application to obtain limited access to a protected HTTP
        resource.  In OAuth, those applications are called clients; they access
        protected resources by presenting an access token to the HTTP resource.
        Access tokens are issued to clients by an authorization server with the
        (sometimes implicit) approval of the resource owner.  These access
        tokens are typically obtained by exchanging an authorization grant,
        which represents the authorization granted by the resource owner (or by
        a privileged administrator).  Several authorization grant types are
        defined to support a wide range of client types and user
        experiences.</t>
      
      <t>The preferred way to request authorization is by using the
        authorization server as an intermediary between the client and resource
        owner.  Flows that use the authorization server as an intermediary make
        extensive use of HTTP redirections, requiring interacion with the
        resource owner's user-agent (typically a web browser).</t>
        
      <t>Alternatively, authorization can be requested directly from the
        resource owner.  Such flows require direct client access to the resource
        owner credentials, which are exchanged for an access token.  These flows
        should only be used when there is a high degree of trust between the
        resource owner and the client (e.g., the client is part of the device
        operating system or a highly privileged application).</t>
        
      <t>When using the authorization server as an intermediary, the
        authorization process is delegated to the authorization server.  This
        process is often used as a form of delegated end-user authentication as
        well.  Delegation in this manner is particularly well-suited to web
        applications.  It is also a best practice for native apps, known as the
        "<xref target="AppAuth">AppAuth</xref> pattern" as detailed by
        <xref target="RFC8252">OAuth 2.0 for Native Apps</xref>.</t>
        
      <t>Despite the recommendations, experience indicates that many developers
        of native apps are hesistant mix web-based and native UIs, often due to
        concerns regarding the percieved negative impact on user experience.
        This results in applications that do not delegate to the authorization
        server, and instead directly handle end-user credentials.  The
        credentials are often verified using a mechanism proprietary to the
        application.</t>
        
      <t>In the case of passwords, these credentials may be verified using OAuth
        2.0 and the resource owner password credentials grant.  However, <xref target="I-D.ietf-oauth-security-topics" section="2.4">OAuth 2.0 Security Best
        Current Practice</xref> states that this grant MUST NOT be used, due
        to the fact that exposing the credentials of the end-user to the client
        is a security concern.</t>
        
      <t>This specification, along with companion documents, defines extensions
        to OAuth 2.0 that improve its suitabilty for use in situations where
        clients require direct access to resource owner credentials.  The result
        is a framework similar to <xref target="RFC4422">Simple Authentication
        and Security Layer (SASL)</xref>, but intended to be used by
        applications accessing protected resources via HTTP rather than a
        connection-oriented protocol.</t>
        
      <t>WIP: Discuss how these are all extensions to the token endpoint, as authorize
        endpoint is used for delegated authorization</t>
        
      <t>WIP: Discuss delegated authorization vs direct authentication.  Delegated
        authorization verifies the authenticaiton performed by the AS.  Direct
        authenticaiton allows the client to perform authentication directly</t>
    </section>
    
    <section>
      <name>Capability Negotiation</name>
      
      <section>
        <name>Authorization Server Capabilities</name>
        
        <t>The authorization server advertises supported grant types using the
          <tt>grant_types_supported</tt> metadata defined by
          <xref target="RFC8414">OAuth 2.0 Authorization Server
          Metadata</xref>.</t>
          
        <t>For example:</t>
        <figure>
          <artwork><![CDATA[
{
  "issuer": "https://server.example.com",
  "token_endpoint":
    "https://server.example.com/token",
  "grant_types_supported":
    ["password", "http://auth0.com/oauth/grant-type/mfa-otp"]
}
]]></artwork>
        </figure>
      </section>
      
      <section>
        <name>Client Capabilities</name>
        
          <section>
            <name>Dynamic Registration</name>
            
            <t>If the client supports <xref target="RFC7591">OAuth 2.0 Dynamic
              Client Registration Protocol</xref>, the client SHOULD advertise
              supported grant types by presenting them to the authorization
              server using the <tt>grant_types</tt> metadata field in a client
              registration request.</t>
              
            <t>If the properties of a dynamically registered client change
              during its lifetime (for instance, because the client software was
              updated), the client SHOULD update its registration with the
              authorization server by making a client update request as
              specified by <xref target="RFC7592">OAuth 2.0 Dynamic Client
              Registration Management Protocol</xref>.</t>
          </section>
          
          <section>
            <name>Token Request</name>
            
            <t>A client supporting this specification SHOULD advertise its
              capabilities by adding the following parameters in requests to the
              token endpoint:</t>
            
            <dl newline="true">
              <dt>grant_types_supported</dt>
              <dd>Array of OAuth 2.0 grant type strings that the client can use
                at the token endpoint, expressed as a list of space-delimited
                strings.  The array values used are the same as those used with
                the <tt>grant_types</tt> parameter defined by
                <xref target="RFC7591">OAuth 2.0 Dynamic Client Registration
                Protocol</xref>.</dd>
              <dt>software_id</dt>
              <dd>A unique identifier string assigned by the client developer or
                software publisher used to identify the client software, as
                defined by <xref target="RFC7591">OAuth 2.0 Dynamic Client
                Registration Protocol</xref>.</dd>
              <dt>software_version</dt>
              <dd>A version identifier string for the client software identified
                by <tt>software_id</tt>, as defined by
                <xref target="RFC7591">OAuth 2.0 Dynamic Client Registration
                Protocol</xref>.</dd>
            </dl>
            
            <t>For example, the client makes the following HTTPS request (line breaks
              are for display purposes only):</t>
            <figure>
              <artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=password&username=johndoe&password=A3ddj3w
&client_id=s6BhdRkqt3
&grant_types_supported=
 http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-otp
]]></artwork>
            </figure>
          </section>
      </section>
    </section>
    
    <section>
      <name>Obtaining Authorization</name>
      
      <section>
        <name>OTP Credentials Grant</name>
        
        <section>
          <name>User Interaction</name>
        </section>
        
        <section>
          <name>Access Token Request</name>
          
          <t>The client makes a request to the token endpoint by adding the
            following parameters using the
            <tt>"application/x-www-form-urlencoded"</tt> format with a character
            encoding of UTF-8 in the HTTP request entity-body:</t>
            
          <dl newline="true">
            <dt>grant_type</dt>
            <dd>REQUIRED.  Value MUST be set to
              <tt>"urn:okta:params:oauth:grant-type:otp"</tt>.</dd>
          
            <dt>username</dt>
            <dd>REQUIRED.  The resource owner username.</dd>
          
            <dt>otp</dt>
            <dd>REQUIRED.  The one-time password generated by a device.</dd>
          
            <dt>client_id</dt>
            <dd>REQUIRED, if the client is not authenticating with the
              authorization server as described in
              <xref target="RFC6749" section="3.2.1">OAuth 2.0</xref>.</dd>
          </dl>
          
          <t>If the client type is confidential or the client was issued client
            credentials (or assigned other authentication requirements), the
            client MUST authenticate with the authorization server as described
            in <xref target="RFC6749" section="3.2.1">OAuth 2.0</xref>.</t>
            
          <t>For example, the client makes the following HTTP request using
            transport-layer security (with extra line breaks for display
            purposes only):</t>
      
          <figure>
            <artwork><![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aokta%3Aparams%3Aoauth%3Agrant-type%3Aotp
  &username=johndoe&otp=123456
]]></artwork>
          </figure>
        </section>
      </section>
      
      <section>
        <name>Out-of-Band Authorization Grant</name>
      </section>
      
    </section>
    
    <section anchor="Security">
      <!-- All drafts are required to have a security considerations section. See RFC 3552 for a guide. -->
      <name>Security Considerations</name>
      <t>This document should not affect the security of the Internet. [CHECK]</t>
      
      <t>TODO: Talk about preventing use of certian grant types (for example,
        if a client support authorization_code, it shouldn't use direct auth).
        See: https://www.rfc-editor.org/rfc/rfc7591.html 4th paragraph of security
        concerns</t>
    </section>
    
    <section anchor="IANA">
    <!-- All drafts are required to have an IANA considerations section. See RFC 8126 for a guide.-->
      <name>IANA Considerations</name>
      <t>This memo includes no request to IANA. [CHECK]</t>
    </section>
  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.6749.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.8414.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7591.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.7592.xml"/>
      </references>
      <references>
        <name>Informative References</name>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.8252.xml"/>
        <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml-ids/reference.I-D.ietf-oauth-security-topics.xml"/>
        <xi:include href="https://www.rfc-editor.org/refs/bibxml/reference.RFC.4422.xml"/>
        <reference anchor="AppAuth" target="https://appauth.io">
          <front>
            <title>AppAuth</title>
            <author fullname="William Denniss" surname="Denniss" initials="W.">
              <organization>Google</organization>
            </author>
          </front>
        </reference>
      </references>
    </references>
 </back>
</rfc>
